pipeline{
      agent  { node { label 'master' } }

stages
{
    stage('checkout')
    {
        steps
        {
            deleteDir()

            echo "copying source from ${workspace}@script"
            sh "cp -R  ${workspace}@script/* ."
        }
    }
    stage('setup')
    {
        steps
        {
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
            credentialsId: 'acr-creds',
            usernameVariable: 'ACR_USER',
            passwordVariable: 'ACR_PASSWORD']])
            {
                sh  "docker -H tcp://${DOCKER_BUILD_PUSH_HOST} login ${ACR_ENDPOINT} -u '${ACR_USER}' -p '${ACR_PASSWORD}'"
            }       
        }
    }
    stage('build')
    {
        steps
        {
            sh "docker -H tcp://${DOCKER_BUILD_PUSH_HOST} build -t ${ACR_ENDPOINT}/team4-poi:${BUILD_TAG} $WORKSPACE/apis/poi"
        }
    }
    stage('integration-test')
    {
        sh "docker -H ${DOCKER_BUILD_PUSH_HOST} build --target build-env -t poi-integration-test $WORKSPACE/apis/poi"
        IF (sh "rtn = $(docker -H ${DOCKER_BUILD_PUSH_HOST} run poi-integration-test /bin/bash -c 'dotnet res
tore tests/UnitTests/UnitTests.csproj >> /dev/null; dotnet test tests/UnitTests/UnitTests.csproj') | grep  -i 'Test Run Failed.'" == "Test Run Failed.") {
            error("Build failed due to integration tests!")
        }
    }
}
    post { 
        always { 
            echo 'Post Build Results'
                                  script {
    properties([[$class: 'GithubProjectProperty',
                projectUrlStr: 'https://github.com/hattan/openhack-devops-team']])
}
step([$class: 'GitHubIssueNotifier',
      issueAppend: true,
      issueLabel: '',
      issueTitle: '$JOB_NAME $BUILD_DISPLAY_NAME failed'])
        }
    }
}