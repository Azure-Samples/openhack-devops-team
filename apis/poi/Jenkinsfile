pipeline{
  agent  { node { label 'master' } }

  environment {
    BUID_TAG = "poipr${env.BUILD_NUMBER}"
  }

  stages {
    stage("login"){
       steps
      {
        withCredentials([[$class: 'UsernamePasswordMultiBinding',
        credentialsId: 'AzureACRCreds',
        usernameVariable: 'ACR_USER',
        passwordVariable: 'ACR_PASSWORD']])
        {
          sh  "docker login ${env.ACR_ENDPOINT} -u '${ACR_USER}' -p '${ACR_PASSWORD}'"
        }   
      }
    }
    stage('build') {
      steps {
        slackSend channel: "#jenkins_notify", message: "Build Started: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}"
        sh "docker build -t ${env.ACR_ENDPOINT}/jenkins-poi-api:${BUILD_NUMBER} $WORKSPACE/apis/poi"
      }
    }

    stage('push') {
      steps {
        sh "docker push ${env.ACR_ENDPOINT}/jenkins-poi-api:${BUILD_NUMBER}"
      }
    }
    stage('Helm Install'){
      steps{
        sh "export KUBECONFIG=/home/jenkins/.kube/config"
        sh "helm version --client"
        sh "helm version"
      }
    }
    stage('Helm Upgrade'){
      steps{
        sh "helm upgrade --install api-poi $WORKSPACE/apis/poi/helm  --namespace default --set repository.image=${env.ACR_ENDPOINT}/jenkins-poi-api --set repository.tag=${BUILD_NUMBER} --set rollingUpdate.maxUnavailablePercentage='0%' --set rollingUpdate.maxSurgePercentage='10%' --set env.webServerBaseUri=${dnsUrl} --set ingress.rules.endpoint.host=${dnsUrl}"
      }
    }
 }
  post { 
  always { 
    echo 'Post Build Results'
    slackSend channel: "#jenkins_notify", message: "Build Successful: ${env.JOB_NAME} ${env.BUILD_NUMBER} ${env.BUILD_URL}"
    script {
      properties([[$class: 'GithubProjectProperty',
                projectUrlStr: 'https://github.com/Openhack03/openhack-devops-team']])
    }
   step([$class: 'GitHubIssueNotifier',
        issueAppend: true,
        issueLabel: '',
        issueTitle: '$JOB_NAME $BUILD_DISPLAY_NAME failed'])
        }
    }
}
