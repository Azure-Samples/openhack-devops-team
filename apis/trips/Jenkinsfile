pipeline {
  agent any
  tools {
    go 'Go 1.11'
  }
  environment {
    ACR_CREDENTIALS = credentials('acr-credentials')
    WEB_IMAGE_NAME = "${ACR_LOGINSERVER}/devopsoh/api-trip:${BUILD_NUMBER}"
    API_PATH = "apis/trips/"
  }
  stages {         
    stage('Check for changeset') {
      when {
        changeset "$API_PATH/*"
      }
      steps {
        echo "This is a change in the API"
        echo "$JOB_NAME"
	
	      script { 
          env.BUILD = "true"
        }
      }
    }
    stage('Check for diff master') {
      when {
        anyOf {
          expression {
            sh(returnStatus: true, script: 'git diff origin/master --name-only | grep "^$API_PATH.*" > /dev/null') == 0
          }
        }
      }
      steps {
        echo "This is a change in the API"
	
	      script { 
          env.BUILD = "true"
        }
      }
    }
    stage('Build Locally') {
      when { environment name: 'BUILD', value: "true" }
      steps {
        dir("$API_PATH") {
          sh 'ls'
          sh 'go version'
        }
      }
    }
    stage('Unit tests') {
      when { environment name: 'BUILD', value: "true" }
      steps {
        dir("$API_PATH") {
          echo 'Unit testing'
          //sh 'dotnet test ./tests/UnitTests/UnitTests.csproj --results-directory . --logger trx --collect "Code Coverage"'
          //mstest testResultsFile:"**/*.trx", keepLongStdio: true                  
        }
      }
    }
    stage('Build Trip Image') {
      when { 
        environment name: 'BUILD', value: "true" 
        branch 'master'
      }
      steps {
        echo 'Building Trip API Docker Image...'
        echo "Should build: ${BUILD}"
        echo "${WEB_IMAGE_NAME}"
         sh '''
           # Build new image and push to ACR.
           docker build -t $WEB_IMAGE_NAME ./apis/trips/
         '''
      }
    }
    stage('Push Trip Image') {
      when { 
        environment name: 'BUILD', value: "true" 
        branch 'master'
      }
      steps {
        echo 'Pushing Trip API Docker Image...'
        sh '''
          echo $WEB_IMAGE_NAME
          docker login ${ACR_LOGINSERVER} -u ${ACR_CREDENTIALS_USR} -p ${ACR_CREDENTIALS_PSW}
          docker push $WEB_IMAGE_NAME
        '''
      }
    }
  }
}
