pipeline {
  agent any
  environment {
    ACR_CREDENTIALS = credentials('acr-credentials')
    WEB_IMAGE_NAME = "${ACR_LOGINSERVER}/devopsoh/api-user-java:${BUILD_NUMBER}"
    API_PATH = "apis/user-java/"
  }
  stages {         
    stage('Check for changeset') {
      //when { changeset "apis/user-java/*" }
      when {
        expression {
          sh(returnStatus: true, script: 'git diff origin/master --name-only | grep "^$API_PATH.*" > /dev/null') == 0
        }
      }
      steps {
        echo "This is a change in the API"
	
	      script { 
          env.BUILD = "true"
        }
      }
    }
    stage('Build Locally') {
      when { environment name: 'BUILD', value: "true" }
      steps {
        withMaven(
            // Maven installation declared in the Jenkins "Global Tool Configuration"
            maven: 'M3',
            // Maven settings.xml file defined with the Jenkins Config File Provider Plugin
            // Maven settings and global settings can also be defined in Jenkins Global Tools Configuration
            mavenSettingsConfig: '',
            mavenLocalRepo: '.repository') {

          // Go to the right folder
          // Run the maven build
          sh "mvn clean package -f apis/user-java/pom.xml -DskipTests"

        } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe & FindBugs reports...
      }
    }
    stage('Unit tests') {
      when { environment name: 'BUILD', value: "true" }
      steps {
        withMaven(
            // Maven installation declared in the Jenkins "Global Tool Configuration"
            maven: 'M3',
            // Maven settings.xml file defined with the Jenkins Config File Provider Plugin
            // Maven settings and global settings can also be defined in Jenkins Global Tools Configuration
            mavenSettingsConfig: '',
            mavenLocalRepo: '.repository') {

          // Go to the right folder
          // Run the maven build
          sh "mvn clean package test -f apis/user-java/pom.xml"

        } // withMaven will discover the generated Maven artifacts, JUnit Surefire & FailSafe & FindBugs reports...
      }
    }
    stage('Build User Image') {
      when { 
        environment name: 'BUILD', value: "true" 
        branch 'master'
      }
      steps {
        echo 'Building User API Docker Image...'
        echo "Should build: ${BUILD}"
        echo "${WEB_IMAGE_NAME}"
         sh '''
           # Build new image and push to ACR.
           docker build -t $WEB_IMAGE_NAME ./apis/user-java/
         '''
      }
    }
    stage('Push User Image') {
      when { 
        environment name: 'BUILD', value: "true" 
        branch 'master'
      }
      steps {
        echo 'Pushing User API Docker Image...'
        sh '''
          echo $WEB_IMAGE_NAME
          docker login ${ACR_LOGINSERVER} -u ${ACR_CREDENTIALS_USR} -p ${ACR_CREDENTIALS_PSW}
          docker push $WEB_IMAGE_NAME
        '''
      }
    }
  }
}
